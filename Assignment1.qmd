---
title: "STA5073Z Assignment 1"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(stringr)
library(dplyr)
library(tidyverse)
library(ggplot2)

#install.packages("tidytext")
library(tidytext)

#update r and install git
#install.packages("remotes")
#remotes::install_github(sprintf("rstudio/%s",
                        #c("reticulate", "tensorflow", "keras")))
#keras:: install_keras()
library(keras)
library(tensorflow)
#tf$constant("Hello world")



```

# Abstract 

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Introduction

The aim of this paper is to identify different machine learning models that can be used for predictive purposes, and rank them according to their ability to do so. With presidential speech from 1994 to 2022 from South African presidents, this paper will review the capacity in which classification trees , neural networks and random forests are able to accurately classify sentences to their presidents. The input structuring process will also vary so as to ascertain which of the few is most suitable for the data at hand.

## Exploratory Data analysis

```{r Reading in Data}

set.seed(2022)
load("F:/STA5073Z- DS4I/pre-processed assignment data.RData")
#sona<-sona[-c(2,20),]  remove Motlante and De Klerk in this version of data split
sona<-sona%>% mutate(speech= str_replace(speech, "\\d{1,2} [A-Za-z]+ \\d{4}", "")) # Remove dates at the start of the speech
sona<- sona%>% mutate(speech= str_replace(speech, pattern = "^Thursday, ", replacement = ""))# remove dates on 2 remaining Ramaphosa speeches 
sona<- sona%>% mutate(speech= str_trim(speech, side= "left"))

Sona_S_tokenized<- unnest_tokens(sona, sentence, speech, token = 'sentences') 
Sona_S_tokenized<- Sona_S_tokenized%>% mutate(sentence= str_replace_all(sentence, "[[:punct:]]", ""))


```

```{r}

Sona_tokenized<-unnest_tokens(sona, word, speech, token = 'words') 

Zuma<-Sona_tokenized%>% group_by(president_13, word)%>% 
        summarise("count"= n())%>% filter(president_13=="Zuma") %>%
        arrange(desc(count))%>%
        filter(!word %in% stop_words$word) %>%
        filter(rank(desc(count)) <= 20) %>%
        ggplot(aes(x = reorder(word, count), y = count)) + geom_col() + coord_flip() + xlab('Top 20 words used')


Mbeki<-Sona_tokenized%>% group_by(president_13, word)%>% 
        summarise("count"= n())%>% filter(president_13=="Mbeki") %>%
        arrange(desc(count))%>%
        filter(!word %in% stop_words$word) %>%
        filter(rank(desc(count)) <= 20) %>%
        ggplot(aes(x = reorder(word, count), y = count)) + geom_col() + coord_flip() + xlab('Top 20 words used')



Mandela<-Sona_tokenized%>% group_by(president_13, word)%>% 
        summarise("count"= n())%>% filter(president_13=="Mandela") %>%
        arrange(desc(count))%>%
        filter(!word %in% stop_words$word) %>%
        filter(rank(desc(count)) <= 20) %>%
        ggplot(aes(x = reorder(word, count), y = count)) + geom_col() + coord_flip() + xlab('Top 20 words used')

Ramaphosa<-Sona_tokenized%>% group_by(president_13, word)%>% 
        summarise("count"= n())%>% filter(president_13=="Ramaphosa") %>%
        arrange(desc(count))%>%
        filter(!word %in% stop_words$word) %>%
        filter(rank(desc(count)) <= 20) %>%
        ggplot(aes(x = reorder(word, count), y = count)) + geom_col() + coord_flip() + xlab('Top 20 words used')

#Top 20 words for each President

par(mfrow = c(2,2))
plot(Zuma)
plot(Mbeki)
plot(Mandela)
plot(Ramaphosa)
#plot(DeKlerk)
#plot(Mothlante)
```

## Method

## Results

## Discussion 

## Conclusion 
